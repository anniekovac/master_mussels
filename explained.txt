aMussel working modes explained:

- sleep
- normal
- camera
- motors
- charging

aPad working modes explained:

- motors : when motors are working (aPad is moving)
- charging_self : when sunlight is charging the aPad (only during the day!)
- charging_mussels : when at least one aMussel is being charged by aPad
- sleep : when nothing is happening (aPad is not even charging - night?)

-----------------------------------------------------------------------------------------------------------------------------
FILES EXPLAINED:

****data_structures.py

EnergyBase
- this is base class for every agent
- property "self.energy" is used for describing how many percent of energy this agent has left
- property "self.working_modes" is a list which contains every possible working mode
- property "self.mode_percentages" is a dictionary which contains keys (working modes) and values (how many
    percentages of energy agent gains or loses during certain working mode)
- method "self.update_energy()" is used to calculate new agents' energy, after certain period of time (deltat) - 
    this change of time depends on working mode that agent containts in that exact moment

aMussel
- this is a class created specifically for aMussel agents
- in __init__() method, working modes for aMussel specifically are defined, as well as mode_percentages (these properties 
    are defined in EnergyBase class)
- if optional argument working_mode is given, in __init__() method, property "self.working_mode" is initialized

aPad
- this is a class created specifically for aPad agents
- in __init__() method, properties "self.working_modes" and "self.mode_percentages" are defined
- property "self.mussels_charging" is a list that contains all the mussels that are charging in some specific moment (this list
    should contain aMussel() class instances)
- property "self.coordinates" is used for x, y coordinates of aPad agent


****init.txt

This is the file where agents are initialized. So if you want an easy way to add some agents to topology, you can add them 
to init.txt file with desired coordinates and energies and run the simulation from there. Parser for init file is placed in 
util.py, function parser().

Convention is this:
type_of_agent:energy,x_coordinate,y_coordinate

So for example:
amussel:23,1,0

means that agent is aMussel that in the beginning of simulation has the energy of 23 percent, and is placed in space on coodinated (1, 0).
